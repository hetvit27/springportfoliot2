package com.nighthawk.spring_portfolio.mvc.calendar;

import java.time.DayOfWeek;

// Prototype Implementation

public class APCalendar {

    /** Returns true if year is a leap year and false otherwise.
     * isLeapYear(2016) returns True
     */          
    public static boolean isLeapYear(int year) {
        if ( (year % 4 == 0) && (year % 100 != 0)){
            return true;
        }
        else if ( year % 400 == 0 ){
            return true;
        }
        else {
            return false;
        }
    }
        
    /** Returns the value representing the day of the week 
     * Random number is generated by pulling the java package
    */
    public static int firstDayOfYear(int year) {
        // implementation not shown
        Date currentDate = new Date(year-1900, 0, 1);

        return currentDate.getDay();
    }
    /** Returns n, where month, day, and year specify the nth day of the year.
     * This method accounts for whether year is a leap year. 
     * dayOfYear(1, 1, 2019) return 1
     * dayOfYear(3, 1, 2017) returns 60, since 2017 is not a leap year
     * dayOfYear(3, 1, 2016) returns 61, since 2016 is a leap year. 
    */ 
    public static int dayOfYear(int month, int day, int year) {
        {
            static int days [] = { 31, 28, 31, 30, 31, 30,
                                   31, 31, 30, 31, 30, 31 };
             
            static int dayOfYear(String date)
            {
                // Extract the year, month and the
                // day from the date string
                int year = Integer.parseInt(date.substring(0, 4));
                 
                int month = Integer.parseInt(date.substring(5, 7));
                 
                int day = Integer.parseInt(date.substring(8));
                if (month > 2 && year % 4 == 0 &&
                   (year % 100 != 0 || year % 400 == 0))
                {
                    ++day;
                }
             
                while (--month > 0)
                {
                    day = day + days[month - 1];
                }
                return day;
            }

    /** Returns the number of leap years between year1 and year2, inclusive.
     * Precondition: 0 <= year1 <= year2
    */ 
    public static int numberOfLeapYears(int year1, int year2) {
        int count = 0;
        for (int i = year1; i <= year2; i++){
            if(isLeapYear(i)){
                count++;
                }   
        }
            return count;
        }

    /** Returns the value representing the day of the week for the given date
     * Precondition: The date represented by month, day, year is a valid date.
    */
    public static int dayOfWeek(int month, int day, int year) { 
        int startDay = firstDayOfYear(year);
        int nthDay = dayOfYear(month, startDay, year);
        int returnDay = (startDay + nthDay -1) % 7;
        return returnDay;
        }

    /** Tester method */
    public static void main(String[] args) {
        // Private access modifiers
        System.out.println("isLeapYear: " + APCalendar.isLeapYear(2016));
        System.out.println("firstDayOfYear: " + APCalendar.firstDayOfYear(2022));
        System.out.println("dayOfYear: " + APCalendar.dayOfYear(3, 5, 2022));

        // Public access modifiers
        System.out.println("numberOfLeapYears: " + APCalendar.numberOfLeapYears(2000, 2022));
        System.out.println("dayOfWeek: " + APCalendar.dayOfWeek(1, 1, 2022));
    }

}