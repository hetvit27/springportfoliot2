package com.nighthawk.spring_portfolio.mvc.calendar;

import java.time.DayOfWeek;

// Prototype Implementation

public class APCalendar 

    /** Returns true if year is a leap year and false otherwise.
     * isLeapYear(2016) returns True
     */          
    public static boolean isLeapYear(int year) {
        if ( (year % 4 == 0) && (year % 100 != 0)){
            return true;
        }
        else if ( year % 400 == 0 ){
            return true;
        }
        else {
            return false;
        }
    }
        
    /** Returns the value representing the day of the week 
     * Random number is generated by pulling the java package
    */
    public static int firstDayOfYear(int year) {
        int day = firstDayOf1970;
        for (int i = 1970; i<year; i++) {
            if (isLeapYear(i)) day = (day + (366 % 7)) % 7;
            else day = (day + (365 % 7)) % 7;
        }
        return day;
    }
  
    /** Returns the value representing the day of the week for the given date
     * Precondition: The date represented by month, day, year is a valid date.
    */
    public static int dayOfWeek(int month, int day, int year) { 
        int startDay = firstDayOfYear(year);
        int nthDay = dayOfYear(month, startDay, year);
        int returnDay = (startDay + nthDay -1) % 7;
        return returnDay;
        }

    /** Tester method */
    public static void main(String[] args) {
        // Private access modifiers
        System.out.println("isLeapYear: " + APCalendar.isLeapYear(2016));
        System.out.println("firstDayOfYear: " + APCalendar.firstDayOfYear(2022));
        System.out.println("dayOfYear: " + APCalendar.dayOfYear(3, 5, 2022));

        // Public access modifiers
        System.out.println("numberOfLeapYears: " + APCalendar.numberOfLeapYears(2000, 2022));
        System.out.println("dayOfWeek: " + APCalendar.dayOfWeek(1, 1, 2022));
    }